from icmplib import ping
import os
import netifaces
from netaddr import IPAddress
import socket
import os
import requests
import json


def get_amount_hosts():
    subnet_mask = netifaces.ifaddresses("eth0")[netifaces.AF_INET][0]['netmask']
    cidr_subnet = sum(bin(int(x)).count('1') for x in subnet_mask.split('.'))
    return 2 ** (32 - cidr_subnet) - 2

def get_ip():
    starting_ip = os.popen("hostname -I").read().strip()
    starting_ip = starting_ip[:starting_ip.rindex(".")+1]
    hosts = get_amount_hosts()
    for end_ip in range(0, 10): # hosts+1
        ip = starting_ip + str(end_ip)
        host = ping(ip, count=1)
        print(ip)
        if host.packets_received == 1:
            yield ip

def get_ports(ip):
    scanner = socket.gethostbyname(ip)
    ports = []
    for port in range(1, 1000):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        print(f"Scanning port: {port}")
        open_ports = sock.connect_ex((ip, port))
        if open_ports == 0:
            ports.append(port)
            sock.close()
    return ports

def get_banner(ip, port):
    mySocket = socket.socket()
    mySocket.connect((ip, port))
    if port == 80:
        mySocket.send ("Get banner \r \n".encode())
    serverRecv = mySocket.recv((2048)).decode()
    with open(f"data/banner_{ip}:{port}.txt", "w", encoding="utf-8") as f:
                f.write(serverRecv)

def enumeration_subpages(file_with_words, ip):
    with open(file_with_words, encoding="UTF-8") as f:
        for line in f.readlines():
            print((line).strip())
            response = requests.get(f"http://{ip}/{line.strip()}")
            if response.status_code != 404:
                with open("find_subpage.txt", "a", encoding="UTF-8") as file:
                    file.write(f"{line}: {response.status_code}\n")



all_ip = get_ip()
for ip in all_ip:
    ports = get_ports(ip)
    with open("data/ip_and_ports.txt", "a", encoding="utf-8") as f:
            f.write(ip)
    for port in ports:
        enumeration_subpages("subpages.txt", ip)
        get_banner(ip, port)
        with open("data/ip_and_ports.txt", "a", encoding="utf-8") as f:
            f.write(f" {port},")
    with open("data/ip_and_ports.txt", "a", encoding="utf-8") as f:
            f.write("\n")
